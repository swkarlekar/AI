{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
\vieww12000\viewh15600\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs20 \cf0 ##########################\uc0\u8232 # Sweta Karlekar         #\u8232 # Period 4               #\u8232 # Tripos Test            #\
# February 16th, 2015    #\uc0\u8232 ##########################\u8232 \u8232 trials = 10000000\u8232 from random import random,  uniform\u8232 \u8232 def main():\u8232    print("Tripos Test:")\u8232    print("Puzzle 1 answer: ", round(puzzle1()/trials, 3))\u8232    print("Puzzle 2 answer: ", round(puzzle2()/trials, 3))\u8232    print("Puzzle 3 answer: ", round(puzzle3()/trials, 3))\u8232    print("Puzzle 4 answer: ", round(puzzle4()/trials, 3))\u8232 \u8232 def puzzle1(): \u8232    breaks = [0, 0]\u8232    triangles = 0\u8232    for n in range(trials):\u8232       breaks[0] = random()\u8232       breaks[1] = random()\u8232       if checkIfTriangle(breaks): triangles+=1\u8232    return triangles\u8232    \u8232 def puzzle2(): \u8232    breaks = [0, 0]\u8232    triangles = 0\u8232    for n in range(trials):\u8232       breaks[0] = random()\u8232       if breaks[0] <= 0.5:\u8232          breaks[1] = uniform(breaks[0], 1)\u8232       else: breaks[1] = uniform(0, breaks[0])\u8232       if checkIfTriangle(breaks): triangles+=1\u8232    return triangles\u8232 \u8232 def puzzle3(): \u8232    breaks = [0, 0]\u8232    triangles = 0\u8232    for n in range(trials):\u8232       breaks[0] = random()\u8232       if random() <= 0.5:\u8232          breaks[1] = uniform(0, breaks[0])\u8232       else: breaks[1] = uniform(breaks[0], 1)\u8232       if checkIfTriangle(breaks): triangles+=1\u8232    return triangles\u8232    \u8232 def puzzle4(): \u8232    breaks = [0, 0]\u8232    triangles = 0\u8232    for n in range(trials):\u8232      breaks[0] = random()\u8232       if random() <= breaks[0]:\u8232          breaks[1] = uniform(0, breaks[0])\u8232       else: breaks[1] = uniform(breaks[0], 1)\u8232       if checkIfTriangle(breaks): triangles+=1\u8232   return triangles\u8232 \u8232 def checkIfTriangle(lst):\u8232    lst.sort()\u8232    x1 = lst[0]\u8232    x2 = lst[1] - lst[0]\u8232    x3 = 1 - lst[1]\u8232    if max(x1, x2, x3) < 0.5: \u8232       return True\u8232 \u8232 if __name__ == '__main__': \u8232    from time import clock; START_TIME = clock();main();\u8232    print (' | %5.2f seconds |' %(clock()-START_TIME))\u8232    \u8232 #######OUTPUT########\u8232 #Tripos Test:\u8232 #Puzzle 1 answer:  0.25\u8232 #Puzzle 2 answer:  0.386\u8232 #Puzzle 3 answer:  0.193\u8232 #Puzzle 4 answer:  0.25\u8232 # | 64.64 seconds |\u8232 #####################}